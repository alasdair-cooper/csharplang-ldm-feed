name: 🚀 deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    name: 🛠️ build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      ACTOR: ${{ github.actor }}
      TOKEN: ${{ secrets.GITHUB_TOKEN }}
      API_IMAGE_NAME: ${{ vars.API_IMAGE_NAME }}
    steps:
      - name: login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.ACTOR }}
          password: ${{ env.TOKEN }}

      - name: build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.API_IMAGE_NAME }}
          file: src/api/Dockerfile

  deploy:
    name: 🚀 deploy
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: read
    env:
      VPS_SSH_DESTINATION: ${{ vars.VPS_SSH_DESTINATION }}
      VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
      VPS_DEPLOY_DIR: ~/${{ github.repository }}
      COMPOSE_ENV: ${{ secrets.COMPOSE_ENV }}
      ACTOR: ${{ github.actor }}
      TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: set SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ env.VPS_SSH_KEY }}

      - name: create deploy dir
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.VPS_SSH_DESTINATION }} "mkdir -p ${{ env.VPS_DEPLOY_DIR }}"

      - name: copy files to server
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" --exclude='.git*' --exclude='artifacts/' --exclude='obj/' ./ ${{ env.VPS_SSH_DESTINATION }}:${{ env.VPS_DEPLOY_DIR }}

      - name: copy secrets to .env
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.VPS_SSH_DESTINATION }} "echo '${{ env.COMPOSE_ENV }}' > ${{ env.VPS_DEPLOY_DIR }}/.env"

      - name: deploy to podman
        run: >
          ssh -o StrictHostKeyChecking=no ${{ env.VPS_SSH_DESTINATION }} "
          cd ~/csharplang-ldm-feed
          && podman login ghcr.io -u ${{ env.ACTOR }} -p ${{ env.TOKEN }}
          && podman compose pull  
          && podman compose up --force-recreate --build -d 
          && podman image prune -f"
